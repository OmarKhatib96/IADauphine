# -*- coding: utf-8 -*-
"""Copie de Projet SD - Partie 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m4u7cVrOUqmZNV0ZjOPgj5y9yeYvqI_s
"""

from __future__ import print_function
import torch
# Packages to load CIFAR10
import torchvision
import torchvision.transforms as transforms
# Packages to define Neural Network
import torch.nn as nn
import torch.nn.functional as F
# Package to define an optmizer
import torch.optim as optim
#import tensorflow as tf

# Verify that CUDA is available
# We will use ``torch.device`` objects to move tensors in and out of GPU
'''if torch.cuda.is_available():
    device = torch.device("cuda")          # a CUDA device object
    y = torch.ones_like(x, device=device)  # directly create a tensor on GPU
    x = x.to(device)                       # or just use strings ``.to("cuda")``
    z = x + y
    #print(z)
    #print(z.to("cpu", torch.double))       # ``.to`` can also change dtype together!
else:
  print('CUDA not available')
'''
epsilon=0.05
#Define a Loss function and optimizer for our CNN
criterion = nn.CrossEntropyLoss()

#Loading and normalizing CIFAR10
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

#Define a CNN
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 5 * 5)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x



net = Net()
optimizer_cnn = optim.SGD(net.parameters(), lr=0.001)



def project_on_ball(delta):
  delta.data[delta.data > epsilon] = epsilon
  delta.data[delta.data < -epsilon] = -epsilon
  return delta


#Define PGD
def PGD (x,net,n_PGD,labels):
  delta = nn.Parameter(torch.zeros(x.shape)) #un delta different pour chaque image init a 0
  net.eval()
  optimizer = optim.SGD([delta], lr=0.001)
  for i in range(n_PGD):
    y_out=net(x)
    loss =  - criterion(y_out, labels)
    loss.backward()
    optimizer.step() #optimizes delta
    delta=project_on_ball(delta)
    x = x + delta
  return x+delta, delta
  
def train_with_pgd(nbr,net):

  
  #Train the network with PGD on attacked samples
  for epoch in range(nbr):  # loop over the dataset multiple times

      running_loss = 0.0
      for i, data in enumerate(trainloader, 0): #train only on 1000 first images
            inputs, labels = data
            # get the inputs; data is a list of [inputs, labels]
            inputs,deltas=PGD(inputs,net,7,labels)
          # zero the parameter gradients for each new image evaluated
            optimizer_cnn.zero_grad()
            # forward + backward + optimize
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer_cnn.step()
          
          # print statistics
            running_loss += loss.item()
            if i % 100 == 99: # print every 2000 (if i%2000==1999) mini-batches
                print('[%d, %5d] loss: %.3f' %
                      (epoch + 1, i + 1, running_loss / 2000))
                running_loss = 0.0

  print('Finished Training')


train_with_pgd(4,net)

#Squeeze:Returns a tensor with all the dimensions of input of size 1 removed.

#For example, if input is of shape: (A \times 1 \times B \times C \times 1 \times D)(A×1×B×C×1×D) then the out tensor will be of shape: (A \times B \times C \times D)(A×B×C×D) .

from math import exp
from sklearn.metrics import classification_report

for images,labels in  testloader:
  net.eval()
  y_pred = net(images)
criterion = nn.CrossEntropyLoss()
after_test = criterion(y_pred.squeeze(),labels )
print('Test loss ' , after_test.item())

PATH = './cifar_net.pth'
torch.save(net.state_dict(), PATH)#save the train model

import matplotlib.pyplot as plt

import numpy as np

def imshow(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


dataiter = iter(testloader)
images, labels = dataiter.next()

# print images
imshow(torchvision.utils.make_grid(images))
print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))


net = Net()
net.load_state_dict(torch.load(PATH))


outputs = net(images)

_, predicted = torch.max(outputs, 1)

print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]
                              for j in range(4)))

correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))

class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))
with torch.no_grad():
    for data in testloader:
        images, labels = data
        outputs = net(images)
        _, predicted = torch.max(outputs, 1)#prend le max de la ligne (la valeur la plus probable)
        c = (predicted == labels).squeeze()
        for i in range(4):
            label = labels[i]
            class_correct[label] += c[i].item()
            class_total[label] += 1


for i in range(10):
    print('Accuracy of %5s : %2d %%' % (
        classes[i], 100 * class_correct[i] / class_total[i]))
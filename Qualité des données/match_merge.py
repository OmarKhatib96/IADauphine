# -*- coding: utf-8 -*-
"""Match_Merge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uuyf_Fh93-ybRGEU-Wdn310JVlSidg8w
"""

import numpy as np
from distances import *
import pandas as pd
from scipy.spatial import distance




data=pd.read_csv('/content/dataset_b.csv')
data=data.drop(columns=['PRODUIT'])
data.head()

r=['CODE_MARQUE','NOM_MARQUE','CA_REF_NATIONALE','CA_NC_NATIONAL']
data=data[r]
s=np.random.random(len(r))
d=[distance.hamming,distance_Jaro_Winkler,val_abs,val_abs]
S={}
D={}
for i in range(len(r)):
  S[r[i]]=s[i]
  D[r[i]]=d[i]

def Similar(v1,v2,t):
  result=False
  if D[t](v1,v2)<S[t]:
    result=True
  return result

def fusion(v1,v2):
    if v1 == None:
      return v2
    elif v2 == None:
      return v1
    else:
      return v1

rules=[['CODE_MARQUE','NOM_MARQUE'],['CA_REF_NATIONALE','CA_NC_NATIONAL']]

def Match(t1,t2):
  t1=dict(t1)
  t2=dict(t2)
  Result=True
  for rj in rules:
    rj_1=True
    i=0
    n=len(rj)
    while rj_1 and (i<n):
      v1=t1[rj[i]]
      v2=t2[rj[i]]
        
      if v1==None or v2==None:
        Result=True
      else:
        
        Result=Similar(v1,v2,rj[i])
      rj_1=rj_1 and Result
      i+=1
    Result=Result or rj_1
  return Result

def Merge(t1,t2):
  t1=dict(t1)
  t2=dict(t2)
  t={}
  for var in t1.keys():
    v1=t1[var]
    v2=t2[var]
    t[var]=fusion(v1,v2)
  return t
